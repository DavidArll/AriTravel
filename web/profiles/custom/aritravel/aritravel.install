<?php

/**
 * @file
 * Install, update and uninstall functions for the AriTravel installation profile.
 */

use Drupal\Core\Config\StorageInterface;
use Drupal\Core\Site\Settings;

/**
 * Implements hook_install().
 */
function aritravel_install() {

  // Set default site name.
  \Drupal::configFactory()->getEditable('system.site')->set('name', 'AriTravel CMS')->save(TRUE);
  // Set default site mail.
  \Drupal::configFactory()->getEditable('system.site')->set('mail', 'admin@aritravel.com')->save(TRUE);
  // Set default country.
  \Drupal::configFactory()->getEditable('system.date')->set('country.default', 'MX')->save(TRUE);
  // Set default timezone.
  \Drupal::configFactory()->getEditable('system.date')->set('timezone.default', 'America/Mexico_City')->save(TRUE);

  // User 1 email
  $user_storage = \Drupal::entityTypeManager()->getStorage('user');
  $user1 = $user_storage->load(1);
  if ($user1) {
    $user1->setEmail('admin@aritravel.com');
    $user1->save();
  }

  // Ensure essential modules for programmatic additions are enabled
  // (though info.yml should handle this, belt-and-suspenders for .install execution order)
  $module_installer = \Drupal::service('module_installer');
  if ($module_installer) {
    $module_installer->install(['taxonomy'], TRUE); // Ensure taxonomy is definitely on for term creation
  }

  // Create default terms for 'Travel Style' vocabulary.
  // Assumes 'travel_style' vocabulary is created from config/install YAML.
  \Drupal::logger('aritravel')->info('Attempting to create default terms for Travel Style.');
  $travel_style_terms = ['romantic', 'adventure', 'solo', 'family', 'luxury'];
  foreach ($travel_style_terms as $term_name) {
    // Check if term already exists (e.g., if install hook runs multiple times or from config)
    $existing_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
        'name' => ucfirst($term_name), // Query by capitalized name
        'vid' => 'travel_style',
    ]);
    if (empty($existing_terms)) {
        \Drupal::entityTypeManager()->getStorage('taxonomy_term')->create([
            'name' => ucfirst($term_name), // Capitalize first letter
            'vid' => 'travel_style',
        ])->save();
        \Drupal::logger('aritravel')->info('Created Travel Style term: @term', ['@term' => ucfirst($term_name)]);
    } else {
        \Drupal::logger('aritravel')->info('Travel Style term already exists: @term', ['@term' => ucfirst($term_name)]);
    }
  }
  \Drupal::logger('aritravel')->info('Finished creating default terms for Travel Style.');

  // Roles and Permissions code
if (!function_exists('_aritravel_grant_permissions')) {
  function _aritravel_grant_permissions($role_id, array $permissions) {
    $role = \Drupal::entityTypeManager()->getStorage('user_role')->load($role_id);
    if (!$role) {
         \Drupal::logger('aritravel')->warning('Role @role_id not found, cannot grant permissions.', ['@role_id' => $role_id]);
        return;
    }
    user_role_grant_permissions($role_id, $permissions);
  }
}
  $editor_role = \Drupal::entityTypeManager()->getStorage('user_role')->create(['id' => 'editor','label' => 'Editor',]);
  $editor_role->save();
  $editor_permissions = [
    'create trip_plan content','edit own trip_plan content','edit any trip_plan content','delete own trip_plan content','delete any trip_plan content','revert trip_plan revisions','view trip_plan revisions',
    'create destination content','edit own destination content','edit any destination content','delete own destination content','delete any destination content','revert destination revisions','view destination revisions',
    'create testimonial content','edit own testimonial content','edit any testimonial content','delete own testimonial content','delete any testimonial content','revert testimonial revisions','view testimonial revisions',
    'access content overview','administer nodes','access administration pages','use text format basic_html','access contextual links','access files overview','administer menu_ui','create url aliases','administer pathauto',
    'administer taxonomy','edit terms in country','edit terms in travel_style','edit terms in tags','delete terms in country','delete terms in travel_style','delete terms in tags',
    'access media overview','create media','edit any media','delete any media',
  ];
  _aritravel_grant_permissions('editor', $editor_permissions);
  $authenticated_permissions = ['access content','access user profiles','use text format basic_html','access jsonapi resource list',];
  _aritravel_grant_permissions('authenticated', $authenticated_permissions);
  $anonymous_permissions = ['access content','access jsonapi resource list',];
  _aritravel_grant_permissions('anonymous', $anonymous_permissions);

  // JSON:API Logging
  \Drupal::logger('aritravel')->info('JSON:API module is expected to be enabled via profile dependencies. Permissions for access have been set. Default path /jsonapi will be used.');

  // OAuth Consumer Creation
  if (\Drupal::moduleHandler()->moduleExists('simple_oauth')) {
    \Drupal::logger('aritravel')->info('simple_oauth module exists. Attempting to create consumer.');
    $consumer_storage = \Drupal::entityTypeManager()->getStorage('consumer');
    // Check if consumer already exists
    $existing_consumers = $consumer_storage->loadByProperties(['client_id' => 'ari_frontend']);
    if (empty($existing_consumers)) {
        // Ensure User 1 exists for the user_id field.
        $user1_for_consumer = $user_storage->load(1); // Use $user_storage from earlier
        if ($user1_for_consumer) {
            $consumer = $consumer_storage->create([
                'client_id' => 'ari_frontend',
                'label' => 'Ari Frontend',
                'secret' => 'AriSecretKey123456',
                'grant_types' => ['password', 'client_credentials', 'authorization_code', 'refresh_token'],
                'scopes' => ['basic', 'content'],
                'is_confidential' => TRUE,
                'user_id' => $user1_for_consumer->id(),
                'redirect_uri' => '',
            ]);
            $consumer->save();
            \Drupal::logger('aritravel')->info('OAuth consumer "ari_frontend" created.');
        } else {
            \Drupal::logger('aritravel')->error('Cannot create OAuth consumer: User 1 not found.');
        }
    } else {
        \Drupal::logger('aritravel')->info('OAuth consumer "ari_frontend" already exists.');
    }
  } else {
    \Drupal::logger('aritravel')->warning('simple_oauth module not enabled. Skipping consumer creation.');
  }
}

// Helper function to suggest default widgets (simplified)
function aritravel_get_default_widget_type($field_type) {
  switch ($field_type) {
    case 'integer':
      return 'number';
    case 'decimal':
      return 'number';
    case 'string':
      return 'string_textfield';
    case 'text_long':
      return 'text_textarea';
    case 'entity_reference_revisions': // Paragraphs
      return 'paragraphs'; // Assumes paragraphs module provides 'paragraphs' widget.
    case 'entity_reference':
      return 'entity_reference_autocomplete_tags'; // Or 'entity_reference_autocomplete'
    default:
      return 'string_textfield'; // A fallback
  }
}

// Helper function to suggest default formatters (simplified)
function aritravel_get_default_formatter_type($field_type) {
  switch ($field_type) {
    case 'integer':
      return 'number_integer';
    case 'decimal':
      return 'number_decimal';
    case 'string':
      return 'string';
    case 'text_long':
      return 'text_default';
    case 'entity_reference_revisions': // Paragraphs
      return 'entity_reference_revisions_entity_view';
    case 'entity_reference':
      return 'entity_reference_label'; // Or 'entity_reference_entity_view'
    default:
      return 'string'; // A fallback
  }
}
